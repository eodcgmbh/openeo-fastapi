import uuid
from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, Response
from fastapi.testclient import TestClient

from openeo_fastapi.api.app import OpenEOApi
from openeo_fastapi.api.models import FilesGetResponse
from openeo_fastapi.api.types import (
    Billing,
    Endpoint,
    File,
    FileFormat,
    GisDataType,
    Link,
    Plan,
)
from openeo_fastapi.client.auth import Authenticator, User
from openeo_fastapi.client.core import OpenEOCore
from openeo_fastapi.client.files import FILE_ENDPOINTS, FilesRegister


def test_api_core(core_api):
    """Test the OpenEOApi and OpenEOCore classes interact as intended."""

    assert isinstance(core_api, OpenEOApi)
    assert isinstance(core_api.app, FastAPI)


def test_policies_set(app_settings):
    """Test the OIDC Policies have been set correctly."""

    assert app_settings.OIDC_POLICIES
    assert len(app_settings.OIDC_POLICIES) == 1


def test_get_wellknown(core_api, app_settings):
    """Test the OpenEOApi and OpenEOCore classes interact as intended."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"/.well-known/openeo/")

    assert response.status_code == 200


def test_get_capabilities(core_api, app_settings):
    """Test the OpenEOApi and OpenEOCore classes interact as intended."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"{app_settings.OPENEO_PREFIX}/")

    assert response.status_code == 200
    assert response.json()["title"] == "Test Api"


def test_get_credentials_oidc(core_api, app_settings):
    """Test the OpenEOApi and OpenEOCore classes interact as intended."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"{app_settings.OPENEO_PREFIX}/credentials/oidc")

    assert response.status_code == 200
    assert len(response.json()["providers"]) == 1


def test_get_health(core_api, app_settings):
    """Test the health endpoint is available."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"{app_settings.OPENEO_PREFIX}/health")

    assert response.status_code == 200


def test_get_userinfo(
    mocked_oidc_config,
    mocked_oidc_userinfo,
    mocked_get_oidc_jwks,
    mocked_validate_token,
    core_api,
    app_settings,
):
    """Test the user info is available."""

    test_app = TestClient(core_api.app)

    response = test_app.get(
        f"{app_settings.OPENEO_PREFIX}/me",
        headers={"Authorization": "Bearer oidc/egi/not-real"},
    )

    assert response.status_code == 200
    assert "user_id" in response.json()


def test_get_udf_runtimes(core_api, app_settings):
    """Test the udf runtimes endpoint is registered."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"{app_settings.OPENEO_PREFIX}/udf_runtimes")

    assert response.status_code == 501


def test_get_conformance(core_api, app_settings):
    """Test the /conformance endpoint as intended."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"{app_settings.OPENEO_PREFIX}/conformance")

    assert response.status_code == 200
    assert 2 == len(response.json()["conformsTo"])


def test_get_file_formats(core_api, app_settings):
    """Test the /conformance endpoint as intended."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"{app_settings.OPENEO_PREFIX}/file_formats")

    assert response.status_code == 200


def test_exception_handler(core_api):
    test_client = TestClient(core_api.app)

    # Define a route that raises an exception
    @core_api.app.get("/test-exception")
    def test_exception():
        raise HTTPException(
            status_code=404,
            detail={"code": "NotFound", "message": "This is a test exception"},
        )

    response = test_client.get("/test-exception")

    assert response.status_code == 404

    # Assert that the response body matches the expected response generated by the exception handler
    expected_response = {"code": "NotFound", "message": "This is a test exception"}
    assert response.json() == expected_response


def test_overwriting_register(
    mocked_oidc_config,
    mocked_oidc_userinfo,
    mocked_get_oidc_jwks,
    mocked_validate_token,
    app_settings,
):
    """Test we are able to over write the file register, and in turn the API endpoint."""

    class ExtendedFileRegister(FilesRegister):
        def __init__(self, settings, links) -> None:
            super().__init__(settings, links)

        def list_files(
            self,
            limit: Optional[int] = 10,
            user: User = Depends(Authenticator.validate),
        ):
            """ """
            return FilesGetResponse(
                files=[File(path="/somefile.txt", size=10)],
                links=[
                    Link(
                        href="https://eodc.eu/",
                        rel="about",
                        type="text/html",
                        title="Homepage of the service provider",
                    )
                ],
            )

    test_links = [
        Link(
            href="https://test.eu/",
            rel="about",
            type="text/html",
            title="Homepage of the service provider",
        )
    ]

    extended_register = ExtendedFileRegister(app_settings, test_links)

    formats = [
        FileFormat(
            title="json",
            gis_data_types=[GisDataType("vector")],
            parameters={},
        )
    ]

    client = OpenEOCore(
        input_formats=formats,
        output_formats=formats,
        links=[
            Link(
                href="https://eodc.eu/",
                rel="about",
                type="text/html",
                title="Homepage of the service provider",
            )
        ],
        billing=Billing(
            currency="credits",
            default_plan="a-cloud",
            plans=[Plan(name="user", description="Subscription plan.", paid=True)],
        ),
        files=extended_register,
    )

    api = OpenEOApi(client=client, app=FastAPI())

    test_client = test_client = TestClient(api.app)
    response = test_client.get(
        f"{app_settings.OPENEO_PREFIX}/files",
        headers={"Authorization": "Bearer oidc/egi/not-real"},
    )

    assert response.status_code == 200


def test_extending_register(
    mocked_oidc_config,
    mocked_oidc_userinfo,
    mocked_get_oidc_jwks,
    mocked_validate_token,
    app_settings,
):
    """Test we are able to extend the file register, and in turn the API."""

    new_endpoint = Endpoint(
        path="/files/{path}",
        methods=["HEAD"],
    )

    class ExtendedFileRegister(FilesRegister):
        def __init__(self, settings, links) -> None:
            super().__init__(settings, links)
            self.endpoints = self._initialize_endpoints()

        def _initialize_endpoints(self) -> list[Endpoint]:
            endpoints = list(FILE_ENDPOINTS)
            endpoints.append(new_endpoint)
            return endpoints

        def get_file_headers(
            self, path: str, user: User = Depends(Authenticator.validate)
        ):
            """ """
            return Response(
                status_code=200,
                headers={
                    "Accept-Ranges": "bytes",
                },
            )

    test_links = [
        Link(
            href="https://test.eu/",
            rel="about",
            type="text/html",
            title="Homepage of the service provider",
        )
    ]

    extended_register = ExtendedFileRegister(app_settings, test_links)

    # Asser the new endpoint has been added to the register endpoints
    assert len(extended_register.endpoints) == 5
    assert new_endpoint in extended_register.endpoints

    formats = [
        FileFormat(
            title="json",
            gis_data_types=[GisDataType("vector")],
            parameters={},
        )
    ]

    client = OpenEOCore(
        input_formats=formats,
        output_formats=formats,
        links=[
            Link(
                href="https://eodc.eu/",
                rel="about",
                type="text/html",
                title="Homepage of the service provider",
            )
        ],
        billing=Billing(
            currency="credits",
            default_plan="a-cloud",
            plans=[Plan(name="user", description="Subscription plan.", paid=True)],
        ),
        files=extended_register,
    )

    api = OpenEOApi(client=client, app=FastAPI())

    # Assert we have not brokebn the api initialisation
    assert api

    # Add the new route from the api to the app router
    api.app.router.add_api_route(
        name="file_headers",
        path=f"{api.client.settings.OPENEO_PREFIX}/files" + "/{path}",
        response_model=None,
        response_model_exclude_unset=False,
        response_model_exclude_none=True,
        methods=["HEAD"],
        endpoint=api.client.files.get_file_headers,
    )

    test_client = test_client = TestClient(api.app)
    response = test_client.head(
        f"{app_settings.OPENEO_PREFIX}/files/somefile.txt",
        headers={"Authorization": "Bearer oidc/egi/not-real"},
    )

    assert response.status_code == 200


def test_overwrite_authenticator_validate(
    mocked_oidc_config, mocked_oidc_userinfo, core_api, app_settings
):
    """Test the user info is available."""

    test_app = TestClient(core_api.app)

    specific_uuid = uuid.uuid4()

    def my_new_cool_auth():
        return User(user_id=specific_uuid, oidc_sub="the-real-user")

    core_api.override_authentication(my_new_cool_auth)

    response = test_app.get(
        f"{app_settings.OPENEO_PREFIX}/me",
        headers={"Authorization": "Bearer /oidc/egi/not-real"},
    )

    assert response.status_code == 200
    assert "user_id" in response.json()
    assert response.json()["user_id"] == str(specific_uuid)
