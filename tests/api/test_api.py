from fastapi import FastAPI, HTTPException
from fastapi.testclient import TestClient

from openeo_fastapi.api.app import OpenEOApi


def test_api_core(core_api):
    """Test the OpenEOApi and OpenEOCore classes interact as intended."""

    assert isinstance(core_api, OpenEOApi)
    assert isinstance(core_api.app, FastAPI)


def test_get_capabilities(core_api, app_settings):
    """Test the OpenEOApi and OpenEOCore classes interact as intended."""

    test_app = TestClient(core_api.app)

    response = test_app.get(f"/{app_settings.OPENEO_VERSION}/")

    assert response.status_code == 200
    assert response.json()["title"] == "Test Api"


def test_get_conformance(core_api, app_settings):
    """Test the /conformance endpoint as intended."""

    from openeo_fastapi.client.conformance import BASIC_CONFORMANCE_CLASSES

    test_app = TestClient(core_api.app)

    response = test_app.get(f"/{app_settings.OPENEO_VERSION}/conformance")

    assert response.status_code == 200
    assert len(BASIC_CONFORMANCE_CLASSES) == len(response.json()["conformsTo"])


def test_exception_handler(core_api):
    test_client = TestClient(core_api.app)

    # Define a route that raises an exception
    @core_api.app.get("/test-exception")
    def test_exception():
        raise HTTPException(
            status_code=404,
            detail={"code": "NotFound", "message": "This is a test exception"},
        )

    response = test_client.get("/test-exception")

    assert response.status_code == 404

    # Assert that the response body matches the expected response generated by the exception handler
    expected_response = {"code": "NotFound", "message": "This is a test exception"}
    assert response.json() == expected_response
